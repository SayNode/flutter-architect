String content() {
  return "import 'package:flutter_secure_storage/flutter_secure_storage.dart'; \nimport 'package:get/get.dart'; \n \nclass SecureStorageService extends GetxService { \n  final storage = const FlutterSecureStorage(); \n \n  Future<String> read(String key) async { \n    containsKey(key).then((value) async { \n      if (value) { \n        String? storedValue = await storage.read(key: key); \n        if (storedValue != null) { \n          return storedValue; \n        } else { \n          throw SecureStorageException('Key \$key is null'); \n        } \n      } else { \n        throw SecureStorageException('Key \$key not found'); \n      } \n    }); \n    throw SecureStorageException('Critical Error. This should never happen'); \n  } \n \n  Future<void> write(String key, String value) async { \n    await storage.write(key: key, value: value); \n  } \n \n  Future<void> delete(String key) async { \n    await storage.delete(key: key); \n  } \n \n  Future<void> deleteAll() async { \n    await storage.deleteAll(); \n  } \n \n  Future<bool> containsKey(String key) async { \n    return await storage.containsKey(key: key); \n  } \n} \n \nclass SecureStorageException implements Exception { \n  final String message; \n \n  SecureStorageException(this.message); \n} \n";
}
