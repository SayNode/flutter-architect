content() {
  return """
/// This file has been generated by Flutter Architect.
/// Flutter Architect is a tool that generates boilerplate code for your Flutter projects.
/// Flutter Architect was created @SayNode Operations AG by Yann Marti and Francesco Romeo
/// https://saynode.ch
/// 

import 'dart:async';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';

import '../error_page.dart';

class NetworkConnectivityController extends GetxController {
  RxInt connectionType = 1.obs;

  final Connectivity _connectivity = Connectivity();

  //Stream to keep listening to network change state
  late StreamSubscription _streamSubscription;

  bool isShowingError = false;

  @override
  void onInit() {
    super.onInit();
    getConnectionType();
    _streamSubscription =
        _connectivity.onConnectivityChanged.listen(_updateState);
    connectionType.bindStream(checkStatus());
    ever(connectionType, (value) => _managePage(value));
  }

  void _managePage(dynamic callBack) {
    if (callBack == 0) {
      isShowingError = true;
      Get.to(() => ErrorPage(
            errorMessage: null,
          ));
    } else {
      if (isShowingError) {
        Get.back();
        isShowingError = false;
      }
    }
  }

  // a method to get which connection result, if you we connected to internet or no if yes then which network
  Future<void> getConnectionType() async {
    var connectivityResult;
    try {
      connectivityResult = await (_connectivity.checkConnectivity());
    } on PlatformException catch (e) {
      debugPrint(e.toString());
    }
    return _updateState(connectivityResult);
  }

  Future<int> getStatusCode() async {
    var code = await connectionType.value;
    return code;
  }

  Stream<int> checkStatus() =>
      Stream.periodic(const Duration(seconds: 10)).asyncMap(
          (_) => Get.put(NetworkConnectivityController()).getStatusCode());

  // state update, of network, if you are connected to WIFI connectionType will get set to 1,
  // and update the state to the consumer of that variable.
  _updateState(ConnectivityResult result) {
    switch (result) {
      case ConnectivityResult.wifi:
        connectionType = 1.obs;
        update();
        break;
      case ConnectivityResult.mobile:
        connectionType = 2.obs;
        update();
        break;
      case ConnectivityResult.none:
        connectionType = 0.obs;
        update();
        break;
      default:
        break;
    }
  }

  @override
  void onClose() {
    //stop listening to network state when app is closed
    _streamSubscription.cancel();
  }
}

class NetworkBinding extends Bindings {
  // dependence injection attach our class.
  @override
  void dependencies() {
    // TODO: implement dependencies
    Get.lazyPut<NetworkConnectivityController>(
        () => NetworkConnectivityController());
  }
}


  """;
}
